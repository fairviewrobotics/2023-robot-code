// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.
package frc.robot.subsystems

import edu.wpi.first.wpilibj2.command.SubsystemBase

class ExampleSubsystem
/** Creates a new ExampleSubsystem.  */
    : SubsystemBase() {
    override fun periodic() {
        // This method will be called once per scheduler run
        private final Gyro m_gyro = new ADXRS450_Gyro()
    public double getHeading() {
        return m_gyro.getRotation2d().getDegrees()
    }
    private final DifferentialDriveOdometry m_odometry
    @Override
  public void periodic() {
    // Update the odometry in the periodic block
    m_odometry.update(m_gyro.getRotation2d(), m_leftEncoder.getDistance(), m_rightEncoder.getDistance())
  }
  public Pose2d getPose() {
    return m_odometry.getPoseMeters()
  }
    }
    
function calculateRotateValue(targetAngle):
    error = targetAngle - gyroAngle
    if error > threshold
        rotation =  error*kP
        return False
    else:
        rotation = 0
        return True
        
        function rotateToAngle(targetAngle):
    error = targetAngle - gyroAngle # check out wpilib documentation for getting the angle from the gyro
    if error > threshold
        this.rotation =  error*kP
        return False
    else:
        this.rotation = 0
        return True

function move(fwd, rotation):
    // This function allows for joystick input
    this.fwd = fwd
    this.rotation = rotation

function execute():
    // Execute function that should be called every loop
    this.robotdrive.drive(this.fwd, this.rotation)

    this.fwd = 0
    this.rotation = 0
    
    drive.rotateToAngle(90)
        
    override fun simulationPeriodic() {
        // This method will be called once per scheduler run during simulation
    }
}
        
        
